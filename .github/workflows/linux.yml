---
name: Linux

on:
  push:
    paths-ignore:
      - '.github/workflows/**'
      - '!.github/workflows/linux.yml'
  pull_request:
    paths-ignore:
      - '.github/workflows/**'
      - '!.github/workflows/linux.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  gcc:
    runs-on: ubuntu-latest
    name: gcc${{ matrix.version }} (c++${{ matrix.standard }})
    container: flagarde/ci-ubuntu-gcc-${{ matrix.version }}-x86_64:latest
    strategy:
      fail-fast: false
      matrix:
        version: [ 7, 8, 9, 10, 11, 12, 13 ]
        standard: [ 17, 20 ]
        exclude:
          # 7
          - version: 7
            standard: 20

    steps:
      - uses: ammaraskar/gcc-problem-matcher@master
      - name: ‚¨áÔ∏è Install git
        run: apt-get update ; apt-get install --no-install-recommends -y git unzip libxft-dev libxext-dev libxpm-dev libssl-dev python3-minimal libvdt-dev libxrootd-client-dev libtbb-dev
      - name: ‚¨áÔ∏è Setup CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: ^3
          ninjaVersion: ^1.11.1
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: clone root
        run: git clone --depth 1 --branch v6-34-02 https://github.com/root-project/root.git
      - name: üìÇ Load .env file
        if: hashFiles('.github/workflows/.env') != ''
        uses: xom9ikk/dotenv@v2
        with:
          path: .github/workflows
      - name: üîß Configure
        run: cmake -S ${{ env.CMAKE_SOURCE_PREFIX }} -B ${{ env.CMAKE_BINARY_PREFIX }} -D CMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} -D CMAKE_CXX_STANDARD=${{ matrix.standard }} -D CMAKE_INSTALL_PREFIX=${{ env.CMAKE_INSTALL_PREFIX }} -D builtin_zlib=ON
      - name: ‚öôÔ∏è Build
        run: cmake --build ${{ env.CMAKE_BINARY_PREFIX }} --config ${{ env.CMAKE_BUILD_TYPE }} --parallel ${{ env.CMAKE_NUMBER_JOBS }}
      - name: üß™ Test
        run: ctest --test-dir ${{ env.CMAKE_BINARY_PREFIX }} -C ${{ env.CMAKE_BUILD_TYPE }} --output-on-failure
      - name: üéâ Install
        run: cmake --install ${{ env.CMAKE_BINARY_PREFIX }} --prefix ${{ env.CMAKE_INSTALL_PREFIX }} --config ${{ env.CMAKE_BUILD_TYPE }}

  clang:

    runs-on: ubuntu-latest
    name: clang${{ matrix.version }} (c++${{ matrix.standard }})
    container: flagarde/ci-ubuntu-clang-${{ matrix.version }}-x86_64:latest
    strategy:
      fail-fast: false
      matrix:
        version: [ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 ]
        standard: [ 17, 20 ]
        exclude:
          # 7 has problem
          - version: 7
            standard: 20
          - version: 11
            standard: 20
          - version: 12
            standard: 20
          - version: 14
            standard: 20

    steps:
      - uses: ammaraskar/gcc-problem-matcher@master
      - name: ‚¨áÔ∏è Install git
        run: apt-get update ; apt-get install --no-install-recommends -y git unzip libxft-dev libxext-dev libxpm-dev libssl-dev python3-minimal libvdt-dev libxrootd-client-dev libtbb-dev
      - name: ‚¨áÔ∏è Setup CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: ^3
          ninjaVersion: ^1.11.1
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: clone root
        run: git clone --depth 1 --branch v6-34-02 https://github.com/root-project/root.git
      - name: üìÇ Load .env file
        if: hashFiles('.github/workflows/.env') != ''
        uses: xom9ikk/dotenv@v2
        with:
          path: .github/workflows
      - name: üîß Configure
        run: cmake -S ${{ env.CMAKE_SOURCE_PREFIX }} -B ${{ env.CMAKE_BINARY_PREFIX }} -D CMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} -D CMAKE_CXX_STANDARD=${{ matrix.standard }} -D CMAKE_INSTALL_PREFIX=${{ env.CMAKE_INSTALL_PREFIX }} -D builtin_zlib=ON
      - name: ‚öôÔ∏è Build
        run: cmake --build ${{ env.CMAKE_BINARY_PREFIX }} --config ${{ env.CMAKE_BUILD_TYPE }} --parallel ${{ env.CMAKE_NUMBER_JOBS }}
      - name: üß™ Test
        run: ctest --test-dir ${{ env.CMAKE_BINARY_PREFIX }} -C ${{ env.CMAKE_BUILD_TYPE }} --output-on-failure
      - name: üéâ Install
        run: cmake --install ${{ env.CMAKE_BINARY_PREFIX }} --prefix ${{ env.CMAKE_INSTALL_PREFIX }} --config ${{ env.CMAKE_BUILD_TYPE }}

  intel:
    runs-on: ubuntu-latest
    name: intel-oneapi (c++${{ matrix.standard }})
    container: flagarde/ci-ubuntu-intel-2024.2-x86_64:latest
    strategy:
      fail-fast: false
      matrix:
        standard: [ 17, 20 ]

    steps:
      - uses: ammaraskar/gcc-problem-matcher@master
      - name: ‚¨áÔ∏è Install git
        run: apt-get update ; apt-get install --no-install-recommends -y git unzip libxft-dev libxext-dev libxpm-dev libssl-dev python3-minimal libvdt-dev libxrootd-client-dev libtbb-dev
      - name: ‚¨áÔ∏è Setup CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: ^3
          ninjaVersion: ^1.11.1
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: clone root
        run: git clone --depth 1 --branch v6-34-02 https://github.com/root-project/root.git
      - name: üìÇ Load .env file
        if: hashFiles('.github/workflows/.env') != ''
        uses: xom9ikk/dotenv@v2
        with:
          path: .github/workflows
      - name: üîß Configure
        env:
          CC: icx
          CXX: icpx
        run: . /opt/intel/oneapi/setvars.sh ; cmake -S ${{ env.CMAKE_SOURCE_PREFIX }} -B ${{ env.CMAKE_BINARY_PREFIX }} -D CMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} -D CMAKE_CXX_STANDARD=${{ matrix.standard }} -D CMAKE_INSTALL_PREFIX=${{ env.CMAKE_INSTALL_PREFIX }} -D builtin_zlib=ON
      - name: ‚öôÔ∏è Build
        run: cmake --build ${{ env.CMAKE_BINARY_PREFIX }} --config ${{ env.CMAKE_BUILD_TYPE }} --parallel ${{ env.CMAKE_NUMBER_JOBS }}
      - name: üß™ Test
        run: ctest --test-dir ${{ env.CMAKE_BINARY_PREFIX }} -C ${{ env.CMAKE_BUILD_TYPE }} --output-on-failure
      - name: üéâ Install
        run: cmake --install ${{ env.CMAKE_BINARY_PREFIX }} --prefix ${{ env.CMAKE_INSTALL_PREFIX }} --config ${{ env.CMAKE_BUILD_TYPE }}
